--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2 module DA.Finance.Test.Asset.Transfer where

import DA.Finance.Account.Fact
import DA.Finance.Asset.Fact
import DA.Finance.Asset.Transfer.Bilateral
import DA.Finance.Types
import DA.Finance.Test.Account.Fact


-- transferAsset
-- A utility function for transferring an assetFact
transferAsset
  (fromParty: Party)
  (toParty: Party)
  (assetTransferRuleCid: ContractId AssetTransferRule)
  (assetFactCid: ContractId AssetFact)
  (accountCid: ContractId AccountFact) =
  scenario do
    account <- submit toParty do fetch accountCid
    assertMsg "party matches" (account.accountId.owner == toParty)
    req <- submit fromParty do exercise assetTransferRuleCid AssetTransferRule_RequestTransfer with assetFactCid = assetFactCid; newOwner = toParty; targetAccountName = account.accountId.identifier
    submit toParty do exercise req AssetTransferRuleRequest_Accept with targetAccountFactCid = accountCid
    

-- registerAssetOnAccount
-- A utility function for registering an assetFact on an account
registerAssetOnAccount (assetFact: AssetFact) (accountCid: ContractId AccountFact) =
  scenario do
    cid <- assetFact.accountId.provider `submit` create assetFact with 
        accountId = assetFact.accountId with 
            owner = assetFact.accountId.provider
    aTCid <- assetFact.accountId.provider `submit` create AssetTransferRule with 
        provider = assetFact.accountId.provider
        owner = assetFact.accountId.provider
        observers = []
    r <- transferAsset assetFact.accountId.provider assetFact.accountId.owner aTCid cid accountCid
    assetFact.accountId.provider `submit` exercise aTCid Archive
    return r

transfer =
  scenario do
    -- ----------------- Setup -----------------
    provider <- getParty "Bank"
    owner <- getParty "Alice"
    bob <- getParty "Bob"
    eve <- getParty "Eve"
    let observers = [bob, eve]

    -- account
    let account = AccountFact with accountId = AccountId {provider = provider; identifier = "123"; owner = owner };  observers = observers
    accountCid <- setupAccount account
    -- assetFact
    let assetFact = AssetFact with
            assetId = AssetId {issuer = provider; instrumentId = InstrumentId { label = "CH123"; version = 0}, version = 0}
            quantity = 10.0
            accountId = AccountId {provider = provider; identifier = "123"; owner = owner }
            observers = []
    -- register and transfer
    registerAssetOnAccount assetFact accountCid
