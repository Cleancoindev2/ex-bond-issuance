--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2 module DA.Finance.Test.Dvp.Fact where

import DA.Map
import DA.Finance.Asset.Fact
import DA.Finance.Dvp.Fact
import DA.Finance.Types
import DA.Finance.Test.Dvp.Setup


-- registerDvpFact
-- A utility scenario function for registering DvpFact
registerDvpFact
  (tradeId: Text)
  (buyer: Party)
  (seller: Party)
  (paymentLegs: Map InstrumentKey Decimal)
  (deliveryLegs: Map InstrumentKey Decimal)
  (settlementDate: Date)
  (observers: [Party])
  =
  scenario do
    cid <- buyer `submit`
      create DvpFactRequest with
        tradeId
        applicant = buyer
        applicantIsBuyer = True
        counterparty = seller
        paymentLegs
        deliveryLegs
        settlementDate = Some settlementDate
        observers
    seller `submit` exercise cid DvpFactRequest_Accept

-- register DvpFact
-- A utility scenario function for registering DvpFact
-- with one payment and one delivery leg (derived from the AssetFact arguments)
registerDvpFactBasic
  (tradeId: Text)
  (payment: AssetFact)
  (delivery: AssetFact)
  (settlementDate: Date)
  (observers: [Party])
  =
  registerDvpFact
    tradeId
    payment.accountId.owner
    delivery.accountId.owner
    (fromList [((InstrumentKey with provider = payment.accountId.provider; instrumentId = payment.assetId.instrumentId), payment.quantity)])
    (fromList [((InstrumentKey with provider = delivery.accountId.provider; instrumentId = delivery.assetId.instrumentId), delivery.quantity)])
    settlementDate observers

-- registerDvpFactMustFail
-- A utility scenario function for testing registeration failures
registerDvpFactMustFail
  (tradeId: Text)
  (buyer: Party)
  (seller: Party)
  (paymentLegs: Map InstrumentKey Decimal)
  (deliveryLegs: Map InstrumentKey Decimal)
  (settlementDate: Date)
  =
  scenario do
    submitMustFail buyer do 
      create DvpFactRequest with
        tradeId
        applicant = buyer
        applicantIsBuyer = True
        counterparty = seller
        paymentLegs
        deliveryLegs
        settlementDate = Some settlementDate
        observers = []

dvpFact = scenario do
  s <- registerAccountsInstrumentsAssetsAndAssetLock
  -- An AssetKey occurs in deliveryLegs and paymentLegs
  registerDvpFactMustFail "dvpId1" s.acc1_1.accountId.owner s.acc2_2.accountId.owner (assetsToLegs [s.asset1_1, s.asset1_2]) (assetsToLegs [s.asset1_2, s.asset2_2]) s.settlementDate
  -- Register DvpFact
  registerDvpFact "dvpId1" s.acc1_1.accountId.owner s.acc2_2.accountId.owner (assetsToLegs [s.asset1_1, s.asset1_2]) (assetsToLegs [s.asset2_1, s.asset2_2]) s.settlementDate []
