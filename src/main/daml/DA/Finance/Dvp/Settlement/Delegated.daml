--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2 module DA.Finance.Dvp.Settlement.Delegated where

import DA.Finance.Account.Fact
import DA.Finance.Asset.Fact
import DA.Finance.Asset.Transfer.Bilateral
import DA.Finance.Dvp.Fact


-- DvpRule
-- A delivery versus payment delegation (Dv) allowing an agent to
-- settle on behalf of buyer and seller at (or after) a predefined settlement date.
template DvpRule
  with
    agent: Party
    actor1: Party
    actor2: Party
    observers: [Party]
  where
    signatory actor1, actor2
    observer observers
    controller agent can
      nonconsuming AllocateAndSettle: (ContractId DvpFact, [(ContractId AssetFact)], [(ContractId AssetFact)])
        with
          dvpFactCid: ContractId DvpFact
          paymentTransferRuleCids: [(ContractId AssetTransferRule)]
          paymentFactCids: [(ContractId AssetFact)]
          paymentTargetAccountFactCids: [(ContractId AccountFact)]
          deliveryTransferRuleCids: [(ContractId AssetTransferRule)]
          deliveryFactCids: [(ContractId AssetFact)]
          deliveryTargetAccountFactCids: [(ContractId AccountFact)]
        do
          dvpFact <- fetch dvpFactCid
          let buyer = if actor1 == dvpFact.buyer then actor1 else actor2
              seller = if actor1 == dvpFact.buyer then actor2 else actor1
          oneTimePaymentTransferRuleCids <- forA paymentTransferRuleCids (\cid -> exercise cid $ AssetTransferRule_PrepareFor buyer)
          atomicSwapWithChecks True buyer seller dvpFactCid oneTimePaymentTransferRuleCids paymentFactCids paymentTargetAccountFactCids deliveryTransferRuleCids deliveryFactCids deliveryTargetAccountFactCids

-- DvpDelegationRequest
-- A request template for entering into a DvpRule
template DvpRuleRequest
  with
    agent: Party
    actor1: Party
    actor2: Party
    observers: [Party]
  where
    signatory actor1
    controller actor2 can
      DvpRuleRequest_Accept: ContractId DvpRule
        do create DvpRule with agent, actor1, actor2, observers
      DvpRuleRequest_Reject: ()
        do return ()
    controller actor1 can
      DvpRuleRequest_Cancel: ()
        do return ()
