--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.Finance.Asset.SplitAndMerge where

import DA.Assert
import DA.Finance.Asset.Fact

template AssetSplitAndMergeRule
  with
    provider: Party
    owner: Party
    observers: [Party]
  where
    signatory provider
    observer observers

    controller owner can
      nonconsuming AssetSplitAndMergeRule_Split : (ContractId AssetFact, ContractId AssetFact)
        with
          assetFactCid: ContractId AssetFact
          quantity: Decimal
        do
          assetFact <- fetch assetFactCid
          assetFact.accountId.provider === provider
          assetFact.accountId.owner === owner
          assert (quantity < assetFact.quantity)
          assert (quantity > 0.0)
          archive assetFactCid
          first <- create assetFact with quantity = quantity
          second <- create assetFact with quantity = assetFact.quantity - quantity
          return (first, second)

      nonconsuming AssetSplitAndMergeRule_Merge : ContractId AssetFact
        with
          assetFactCid: ContractId AssetFact
          otherCid: ContractId AssetFact
        do
          assetFact <- fetch assetFactCid
          assetFact.accountId.provider === provider
          assetFact.accountId.owner === owner
          other <- fetch otherCid
          assetFact.assetId === other.assetId
          assetFact.accountId === other.accountId
          archive assetFactCid
          archive otherCid
          create assetFact with quantity = assetFact.quantity + other.quantity

      AssetSplitAndMergeRule_SetObservers: ContractId AssetSplitAndMergeRule
        with
          newObservers: [Party]
        do create AssetSplitAndMergeRule with provider; owner; observers = newObservers
