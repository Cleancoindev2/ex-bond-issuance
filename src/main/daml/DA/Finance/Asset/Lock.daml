--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.Finance.Asset.Lock where

import DA.Assert
import DA.Finance.Asset.Fact

-- Locking
--
-- Locking is a DAML pattern with many use cases. When a contract is locked,
-- its choices may no longer be exercised. A contract can be unlocked by the
-- controlling parties or when its lock time has expired.
--
-- This implementation of locking is for AssetFact and uses the update pattern.
-- An AssetLockRule instance allows the owner of the AssetFact to atomicly archive it
-- and create an AssetLockedFact instance, i.e., locking. The AssetLockedFact instance
-- can be used to recreate the AssetFact, i.e., unlocking.
lock (counterparty: Party) (assetWithLockRule: (ContractId AssetFact, ContractId AssetLockRule)) =
  exercise assetWithLockRule._2 AssetLockRule_Lock with assetFactCid = assetWithLockRule._1; agent = counterparty; until = None

unlock (assetCids: [(ContractId AssetLockedFact)]) =
  let unlockAsset (t: ContractId AssetLockedFact) = exercise t AssetLockedFact_Unlock
  in mapA (unlockAsset) assetCids

template AssetLockRule
  with
    provider: Party
    owner: Party
    observers: [Party]
  where
    signatory provider
    observer observers

    controller owner can
      nonconsuming AssetLockRule_Lock: ContractId AssetLockedFact
        with
          assetFactCid: ContractId AssetFact
          agent: Party
          until: Optional Time
        do
          assetFact <- fetch assetFactCid
          assetFact.accountId.provider === provider
          assetFact.accountId.owner === owner
          archive assetFactCid
          create AssetLockedFact with
            assetFact = assetFact
            until = until
            agent = agent
            observers = observers

      AssetLockRule_SetObservers: ContractId AssetLockRule
        with
          newObservers: [Party]
        do create AssetLockRule with provider; owner; observers = newObservers

-- Template used to unlock the assetFact
template AssetLockedFact
  with
    assetFact: AssetFact
    until: Optional Time
    agent: Party
    observers: [Party]
  where
    signatory  assetFact.accountId.owner, assetFact.accountId.provider
    observer assetFact.observers <> observers

    controller assetFact.accountId.owner can
      AssetLockedFact_Clawback: ContractId AssetFact
        do
          time <- getTime
          assert (optional False (\t -> time > t) until)
          create assetFact

    controller [assetFact.accountId.owner, agent] can
      AssetLockedFact_Unlock: ContractId AssetFact
        do
          create assetFact
